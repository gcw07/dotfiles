# Run tests
function p() {
   if [ -f vendor/bin/pest ]; then
      vendor/bin/pest "$@"
   else
      vendor/bin/phpunit "$@"
   fi
}

function pf() {
   if [ -f vendor/bin/pest ]; then
      vendor/bin/pest --filter "$@"
   else
      vendor/bin/phpunit --filter "$@"
   fi
}

# Laravel Artisan
function artisan() {
    php artisan "$@"
}

# Laravel Tinker
function tinker() {
  if [ -z "$1" ]
    then
       php artisan tinker
    else
       php artisan tinker --execute="dd($1);"
  fi
}

# DB (mysql)
function db {
    if [ "$1" = "refresh" ]; then
        export MYSQL_PWD="password"; mysql -uroot -e "drop database $2; create database $2"
    elif [ "$1" = "create" ]; then
        export MYSQL_PWD="password"; mysql -uroot -e "create database $2"
    elif [ "$1" = "drop" ]; then
        export MYSQL_PWD="password"; mysql -uroot -e "drop database $2"
    elif [ "$1" = "list" ]; then
        export MYSQL_PWD="password"; mysql -uroot -e "show databases" | perl -p -e's/\|| *//g'
    fi
}

# Open DB from .env file info
function opendb () {
   [ ! -f .env ] && { echo "No .env file found."; exit 1; }

   DB_CONNECTION=$(grep DB_CONNECTION .env | grep -v -e '^\s*#' | cut -d '=' -f 2-)
   DB_HOST=$(grep DB_HOST .env | grep -v -e '^\s*#' | cut -d '=' -f 2-)
   DB_PORT=$(grep DB_PORT .env | grep -v -e '^\s*#' | cut -d '=' -f 2-)
   DB_DATABASE=$(grep DB_DATABASE .env | grep -v -e '^\s*#' | cut -d '=' -f 2-)
   DB_USERNAME=$(grep DB_USERNAME .env | grep -v -e '^\s*#' | cut -d '=' -f 2-)
   DB_PASSWORD=$(grep DB_PASSWORD .env | grep -v -e '^\s*#' | cut -d '=' -f 2-)

   DB_URL="${DB_CONNECTION}://${DB_USERNAME}:${DB_PASSWORD}@${DB_HOST}:${DB_PORT}/${DB_DATABASE}"

   echo "Opening ${DB_URL}"
   open $DB_URL
}

# Archive (zip folder)
function archive () {
   zip -r "$1".zip -i "$1" ;
}

# Create a new directory and enter it
function mkd() {
   mkdir -p "$@" && cd "$@"
}

# Refresh NPM packages
function npm-fresh() {
    rm -rf node_modules package-lock.json yarn.lock
    npm cache clear --force
    npm install
}

# Remove Host from SSH
function removehost() {
   ssh-keygen -R "$1"
}
